DEV ENVIRONMENT
- make sure nvm, npm, and node are all installed
- nvmrc file ensures that anyone who wishes to clone the project will have the proper version of node installed
- create a gitignore to handle pushing unneccessary files to public repositories

APIS
- Application Programming Interface
- REST API - Representational State Transfer
- Restful requests (endpoint, HTTP method, HTTP headers, body data)

HTTP Status codes:
- 100+ informational response
- 200+ request has succeeded
- 300+ request has redirected to another URL
- 400+ Client side error
- 500+ Server side error

Express app created
- launch the local server with node index.js
- Control + C closes out the app
- uses the format app.METHOD(PATH, HANDLER)

OAUTH and authorization
- (Should check out playback apps on the discover page)
- Add nodemon as a dependecy to help with node server workflow (automated update when changes are made)
- OAUTH - Open authorization
- use .env file for safety and keeping things private
- make example env file to allow others to see what the format should look like
- install npm package dotenv to handle .env files
- add in redirect url into the .env file
- install axios to help with app post request
- handled refresh token reauthorization

React app
- create react app using npx command
- place it in a client folder
- launch app with npm start
- add spotify login routing to App.js
- run locally using split terminal, one running the react app cd'd into client, the other cd'd into the root folder running node / express server
- edit callback in index.js to redirect to react app
- passed the acccess token and refresh token back to react through url params
- set up a proxy in react's package.json to prevent CORS error
- install concurrently to help dev environment
- move queryparams logic to it's own .js file for proper file management
- change the access token from being saved in query params into being saved in local storage
- added logout functionality and handled backend refreshing in spotify.js
- download react router dom in client folder (using the old version as upgrading Switches to Routes seemed like a hassle as the upside isn't applicable to this project)
- use styled-components for better CSS integration
- createGlobalStyle allows us to utilize global styles and react styled-components without getting bogged down in additional tags

